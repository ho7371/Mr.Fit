<?xml version="1.0" encoding="UTF-8"?>
<!-- Sql Mapper -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="admin">
	
	 <!-- 회원 리스트 -->
    <select id="commonMemberList" parameterType="map" resultType="memberVO" resultMap="MRM">
    	select id, name, phone, address, email, point, totalSpent, grade, rnum, status
  		from (
  				select ROW_NUMBER() OVER(ORDER BY totalSpent DESC) AS rnum,
  				id, name, phone, address, email, point, totalSpent, grade, status
  				from member 
  				where status=#{status} 
  			 ) 
  		where rnum between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber}
    </select>
	
	 	<resultMap type="memberVO" id="MRM">
	 		<result column="grade" property="gradeVO.grade"/>
	 	</resultMap>
 	
 	 <!-- 회원 검색 -->
    <select id="adminSearchMember" parameterType="string" resultType="memberVO">
    	select id, name, phone, address, email, point, totalSpent, grade, status
    	from member
    	where id=#{value} and status=1
    </select>
 	
     <!-- 활성상태인 회원 수 -->
    <select id="getTotalCommonMemberCount" parameterType="int" resultType="int">
    	select count(*) 
    	from member
    	where status=#{value}
    </select>

    <!-- <resultMap type="orderVO" id="ORM">
    	<result column="ono" property="ono"/>
    	<result column="totalprice" property="totalprice"/>
    	<result column="ordertime" property="ordertime"/>
    	<result column="status" property="status"/>
    </resultMap>-->
    
    <!-- 회원 활성상태 업데이트 -->
    <update id="adminUpdateMemberStatus" parameterType="string">
    	update member
    	set status=0
    	where id=#{value}
    </update>
    
    <!-- 회원 권한 삭제 -->
    <delete id="adminDeleteMemberAuthority" parameterType="string">
    	delete from auth where id=#{value}
    </delete>
    
   <!-- 회원 포인트 지급 -->
    <update id="adminGivePointToMember" parameterType="memberVO">
    	update member
    	set point=point+#{point} 
    	where id=#{id}
    </update>
    
	<!-- 상품 상태 변경 -->
	<update id="changeStatusProduct" parameterType="productVO">
		update product set status = #{status} where pno = #{pno}
	</update>

    <!-- 모든 주문 내역 리스트 -->
    <select id="adminAllOrderList" resultType="orderVO" parameterType="pagingBean" resultMap="MemberRM">
		select o.ono, m.id, m.name, o.totalprice, o.ordertime, o.status, o.destination, o.rnum 
		from 
		( select ROW_NUMBER() OVER(ORDER BY ono DESC) AS rnum,
		  ono, id, totalprice, ordertime, status, destination
		  from orders where status <![CDATA[ <> ]]> '장바구니'
		) o, member m 
		where rnum between #{startRowNumber} and #{endRowNumber} and m.id = o.id order by o.ono desc
    </select>
    
    	 <resultMap type="orderVO" id="MemberRM">
	    	<result column="ono" property="ono"/>
	    	<result column="id" property="memberVO.id"/>
	    	<result column="name" property="memberVO.name"/>
	    </resultMap>
	
	<!-- 주문 리스트 개수 -->
	<select id="adminTotalOrderCount" resultType="int">
		select count(*) from orders 
		where status <![CDATA[ <> ]]> '장바구니'
	</select>
	
	<!-- 아이디로 주문 검색 : 주문 총 개수 -->
	<select id="adminSearchMemberOrderCount" parameterType="string" resultType="int">
		select count(*) from orders 
		where status <![CDATA[ <> ]]> '장바구니' and id = #{value}
	</select>
	
	<!-- 아이디로 주문 검색 : 주문 목록 리스트 -->
	<select id="adminSearchOrder" parameterType="map" resultMap="MemberRM">
		select o.ono, m.id, m.name, o.totalprice, o.ordertime, o.status, o.destination, o.rnum 
		from 
		( select ROW_NUMBER() OVER(ORDER BY ono DESC) AS rnum,
		  ono, id, totalprice, ordertime, status, destination
		  from orders where status <![CDATA[ <> ]]> '장바구니' and id = #{memberId}
		) o, member m 
		where rnum between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber} and m.id = o.id 
	</select>
	
	<!-- 주문번호로 주문 검색 : 주문 총 개수 -->
	<select id="adminSearchOrderCountByOrderNumber" parameterType="string" resultType="int">
		select count(*) from orders where ono=#{value}
	</select>
	
	<!-- 주문번호로 주문 검색 : 하나의 주문 찾기 -->
	<select id="adminSearchOrderByOno" parameterType="string" resultType="orderVO" resultMap="MemberRM">
		select o.ono, m.id, m.name, o.totalprice, o.ordertime, o.status, o.destination 
		from orders o, member m	where o.ono=#{value} and o.id=m.id
	</select>


	<!-- 주문 상태 변경 : 주문번호로 주문 검색  -->
	<select id="adminfindOrderByOno" parameterType="string" resultType="orderVO">
		select * from orders where ono = #{ono}
	</select>
	
	<!-- 주문 상태 변경 -->
	<update id="updateOrderStatus" parameterType="map">
		update orders set status = #{status} where ono = #{ono}
	</update>
	
	
	<!-- 쪽지 보내기 -->
	<insert id="sendMessage" parameterType="map">
		insert into note(note_no, content, send_date, id)
		values(note_no_seq.nextval, #{message}, sysdate, #{id})
	</insert>
	
	<!-- 쪽지 리스트 -->
	<select id="getNoteList" resultType="noteVO">
		select note_no, content, send_date, id 
		from ( select row_number() over(order by note_no desc) as note_no, content, send_date, id from note )
		where note_no between #{startRowNumber} and #{endRowNumber} 
	</select>
	
	<!-- 쪽지함 개수 -->
	<select id="totalNoteCount" resultType="int">
		select count(*) from note
	</select>
	
	<!-- 관리자 포인트 지급 이력 작성 -->
	<insert id="reportPoint" parameterType="map">
		insert into point(point_no, id, updown, change_date, status)
		values(point_no_seq.nextval, #{id}, #{point}, sysdate, #{status})
	</insert>
	
	<!-- 포인트 내역 -->
	<select id="adminPointList" resultType="pointVO" parameterType="pagingBean">
		select point_no, id, updown, status, change_date
		from (select row_number() over(order by point_no desc) as point_no, id, updown, status, change_date from point)
		where point_no between #{startRowNumber} and #{endRowNumber}
	</select>
	
	<!-- 포인트 내역 개수 -->
	<select id="totalPointListCount" resultType="int">
	 	select count(*) from point
	</select>
	
	<!-- 아이디로 포인트 이력 검색 : 이력 총 개수 -->
	<select id="adminSearchPointCount" parameterType="string" resultType="int">
		select count(*) from point where id like '%' || #{value} || '%'
	</select>
	
	<!-- 아이디로 포인트 이력 검색  -->
	<select id="adminSearchPoint" parameterType="map" resultType="pointVO">
		select point_no, id, updown, status, change_date
		from 
		(select row_number() over(order by point_no desc) as point_no, 
		id, updown, status, change_date from point where id = #{id} )
		where point_no between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber} 
	</select>
	
	<!-- 지급형태로 포인트 이력 검색 : 이력 총 개수-->
	<select id="adminSearchPointCountByStatus" parameterType="string" resultType="int">
		select count(*) from point where status = #{value}
	</select>
	
	<!-- 지급형태로 포인트 이력 검색  -->
	<select id="adminSearchPointByStatus" parameterType="map" resultType="pointVO">
		select point_no, id, updown, status, change_date
		from 
		(select row_number() over(order by point_no desc) as point_no, 
		id, updown, status, change_date from point where status like '%' || #{status} || '%')
		where point_no between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber} 
	</select>
	
	<resultMap type="productDetailVO" id="productSizeListRM">
		<result column="psno" property="productSizeVO.psno" />
		<result column="size_name" property="productSizeVO.size_name" />
	</resultMap>
	
	<!-- 상품 재고 불러오기 -->
	<select id="updateProductForm" parameterType="string" resultMap="productSizeListRM">
		SELECT pd.pdno, pd.pno,pc.pcno, pc.color_name, ps.psno as psno,ps.size_name,pd.inventory
		FROM product_detail pd, product_color pc, product_size ps
		WHERE pd.pcno=pc.pcno and pd.psno=ps.psno and pd.pno=#{value}
	</select>
	
	<!-- 상품 재고 업데이트 -->
	<update id="updateProductInventory" parameterType="productDetailVO">
		update product_detail set inventory=#{inventory} where pdno=#{pdno}
	</update>
	
	<!-- 탈퇴 회원 살리기 ( 권한 부여 ) -->
	<insert id="restoreMemberAuthority" parameterType="string">
		insert into auth(auth, id) values('ROLE_MEMBER',#{value})
	</insert>
	
	<!-- 탈퇴 회원 살리기 ( 활성 상태 변경 ) -->
	<update id="restoreMemberStatus" parameterType="string">
		update member set status = 1 where id = #{value}
	</update>
	<!-- [석환] 상품리스트 -->
	<select id="adminProductList" parameterType="pagingBean" resultType="productVO">
		SELECT pno, name, price, content, category, status
		from (select row_number() over(order by pno desc) as
		rnum,pno,price,name,category,content,status from Product)
		product
		where rnum 
		between #{startRowNumber} and #{endRowNumber}
		ORDER BY pno DESC
	</select>
</mapper>










